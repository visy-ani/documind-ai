// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User Management
model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String?
  name         String?
  provider     String   // email, google
  avatarUrl    String?
  usageTier    String   @default("free") // free, pro, enterprise
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  workspaces WorkspaceMember[]
  documents  Document[]
  comments   Comment[]

  @@map("users")
}

// Workspace Management
model Workspace {
  id        String   @id @default(uuid())
  name      String
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members   WorkspaceMember[]
  documents Document[]
  webhooks  IntegrationWebhook[]

  @@map("workspaces")
}

model WorkspaceMember {
  id          String   @id @default(uuid())
  userId      String
  workspaceId String
  role        String   // admin, editor, viewer
  joinedAt    DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@map("workspace_members")
}

// Document Management
model Document {
  id            String   @id @default(uuid())
  workspaceId   String
  userId        String
  name          String
  type          String   // pdf, docx, xlsx, image
  storageUrl    String
  version       Int      @default(1)
  tags          String[]
  extractedText String?  @db.Text
  metadata      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  queries   AIQuery[]

  @@index([workspaceId])
  @@index([userId])
  @@map("documents")
}

// AI Query History
model AIQuery {
  id         String   @id @default(uuid())
  documentId String
  userId     String
  query      String   @db.Text
  response   String   @db.Text
  model      String   @default("gemini-2.0-flash-exp")
  createdAt  DateTime @default(now())

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@map("ai_queries")
}

// Collaboration
model Comment {
  id          String   @id @default(uuid())
  documentId  String
  userId      String
  content     String   @db.Text
  aiSuggested Boolean  @default(false)
  position    Json?    // For anchoring to specific doc sections
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@map("comments")
}

// Integrations
model IntegrationWebhook {
  id          String   @id @default(uuid())
  workspaceId String
  url         String
  event       String   // document.uploaded, analysis.completed
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("integration_webhooks")
}
